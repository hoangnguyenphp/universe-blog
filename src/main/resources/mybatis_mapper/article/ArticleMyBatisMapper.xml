<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hn369.universeblog.infra.repository.article.ArticleMyBatisMapper">

    <resultMap id="ArticleMapper" type="com.hn369.universeblog.dto.article.ArticleReadResponseDto">
        <id property="articleUuid" column="article_uuid"/>
        <result property="articleName" column="article_name"/>
        <result property="articleContent" column="article_content"/>
        <result property="createdUser" column="created_user"/>
        <result property="updatedUser" column="updated_user"/>
        <result property="createdUser" column="created_user"/>
        <result property="masterTopic" column="topic_name"/>
        <result property="masterTopicUuid" column="topic_uuid"/>
        <result property="serialArticle" column="serial_article_uuid"/>
        <result property="languageCode" column="language_code"/>
        <result property="languageName" column="language_name"/>
        <result property="viewCounter" column="view_counter"/>
        <result property="sourceReference" column="source_reference"/>
        <result property="dateCreated" column="date_created"/>
        <result property="dateUpdated" column="date_updated"/>
        <result property="chapterId" column="chapter_id"/>
    </resultMap>
    
    <resultMap id="RelatedArticleMapper" type="com.hn369.universeblog.dto.article.RelatedArticleReadResponseDto">
        <id property="articleUuid" column="article_uuid"/>
        <result property="articleName" column="article_name"/>
        <result property="createdUser" column="created_user"/>
        <result property="dateCreated" column="date_created"/>
        <result property="viewCounter" column="view_counter"/>
        <result property="isSerialArticleMaster" column="is_serial_article_master"/>
        <result property="topicOverlap" column="topic_overlap"/>
    </resultMap>
    

	<select id="findSingleArticlesByTopicAndLanguage" resultMap="ArticleMapper">
	    SELECT 
	        at.article_uuid, 
	        at.article_name, 
	        at.article_content, 
	        at.created_user, 
	        at.updated_user, 
	        at.serial_article_uuid, 
	        tt.topic_name, 
	        tt.topic_uuid, 
	        l.language_code, 
	        l.language_name,
	        a.view_counter,
	        -- Priority for language matching (exact match first)
	        CASE 
	            WHEN at.language_code = #{languageCode} THEN 1 
	            ELSE 2 
	        END AS language_priority
	    FROM article a 
	    JOIN article_translation at ON a.article_uuid = at.article_uuid
	    JOIN article_topic atp ON a.article_uuid = atp.article_uuid
	    JOIN topic t ON t.topic_uuid = atp.topic_uuid
	    JOIN topic_translation tt ON t.topic_uuid = tt.topic_uuid
	    JOIN language l ON at.language_code = l.language_code
	    WHERE atp.topic_uuid = #{topicUuid}
	    AND atp.master_topic = true
	    AND at.language_code IN ('int', #{languageCode})
	    AND tt.language_code IN ('int', #{languageCode})
	    AND at.serial_article_uuid IS NULL
	    ORDER BY 
	        language_priority ASC,  -- Exact language matches first
	        a.view_counter DESC,    -- Then by popularity
	        at.date_updated DESC    -- Then by recency
	    <if test="quantity != null and quantity > 0">
	        LIMIT #{quantity}
	    </if>
	</select>
    
	<select id="retrieveHotArticles" resultMap="ArticleMapper">
		select at.article_uuid, at.article_name, at.article_content, at.created_user, 
			   at.updated_user, at.serial_article_uuid, tt.topic_name, tt.topic_uuid, l.language_code, l.language_name,
			   a.view_counter
		from article a join article_translation at on a.article_uuid = at.article_uuid
			  join article_topic atp on a.article_uuid = atp.article_uuid
			  join topic t on t.topic_uuid = atp.topic_uuid
			  join topic_translation tt on t.topic_uuid = tt.topic_uuid
			  join language l on at.language_code = l.language_code
		where atp.master_topic = true
			  and at.language_code in ('int', #{languageCode})
			  and tt.language_code in ('int', #{languageCode})
	    order by a.view_counter desc
	    limit #{quantity}
    </select>

	<select id="retrieveArticleByUuidAndLanguage" resultMap="ArticleMapper">
		select article_uuid, article_name, article_content,  date_created, date_updated, serial_article_uuid,
			   created_user, updated_user, source_reference, chapter_id, l.language_code, l.language_name
		from article_translation at join language l on at.language_code = l.language_code
		where article_uuid = #{articleUuid} and at.language_code in (#{languageCode}, 'int')
    </select>
    
    <select id="findBySerialArticleAndChapterIdAndLanguage" resultMap="ArticleMapper">
		select article_uuid, article_name, article_content,  date_created, date_updated, serial_article_uuid,
			   created_user, updated_user, source_reference, chapter_id, l.language_code, l.language_name
		from article_translation at join language l on at.language_code = l.language_code
		where serial_article_uuid = #{serialArticleUuid} and at.language_code in (#{languageCode}, 'int')
			  and chapter_id = #{chapterId}
    </select>
    
	<select id="retrieveAllChaptersOfASerialArticle" resultMap="ArticleMapper">
	    SELECT at.article_uuid, at.article_name, at.created_user, 
	           at.updated_user, at.date_created, at.date_updated,
	           at.chapter_id, at.serial_article_uuid, a.view_counter
	    FROM article a 
	         JOIN article_translation at ON a.article_uuid = at.article_uuid
	         JOIN serial_article sa ON at.serial_article_uuid = sa.serial_article_uuid
	    WHERE sa.serial_article_uuid = #{serialArticleUuid}
	          AND language_code = #{languageCode}
	    ORDER BY at.chapter_id
	    LIMIT #{size} OFFSET #{offset}   <!-- Pagination clause -->
	</select>
	
	<select id="retrieveRelatedArticles" resultMap="RelatedArticleMapper">
	  <![CDATA[
		/*
		I want to get related articles which have the same topic with an input article_uuid. Do you think this query is ok:
		
			    SELECT a.article_uuid, 
			   		   COALESCE(at2.article_name, a.article_name) AS display_name,
			   		   a.view_counter,
			   		   a.date_created,
			   		   a.created_user,
			   		   COUNT(*) AS topic_overlap
			    FROM article a JOIN article_translation at1 ON a.article_uuid = at1.article_uuid
			    				AND at1.article_uuid = '2037426d-ad61-4d12-8a04-765228806dbf'
			    				AND at1.language_code = 'en'
			    			 JOIN article_topic ato1 ON at1.article_uuid = ato1.article_uuid
			    			 JOIN article_topic ato2 ON ato1.topic_uuid = ato2.topic_uuid
			    			 JOIN atilce_translation at2 ON ato2.article_uuid = at2.article_uuid
			    			 	AND at2.language_code = 'en'
			    WHERE   at1.article_uuid <> at2. article_uuid
			    GROUP BY a.article_uuid, at2.article_name, a.article_name, a.view_counter, a.date_created, a.created_user
			    ORDER BY topic_overlap
			    LIMIT 10 OFFSET 0
		*/  
		WITH target_topics AS (
			SELECT topic_uuid
			FROM article_topic
			WHERE article_uuid = #{articleUuid}
		),
		
		single_article AS (
			SELECT 
				a2.article_uuid AS article_uuid, 
				COALESCE(at2.article_name, a2.article_name) AS article_name,
				a2.view_counter,
				a2.date_created,
				a2.created_user,
				false AS is_serial_article_master,
				COUNT(*)::int AS topic_overlap
			FROM target_topics tt
			JOIN article_topic ato2 
				ON tt.topic_uuid = ato2.topic_uuid
			JOIN article a2 
				ON ato2.article_uuid = a2.article_uuid
			LEFT JOIN article_translation at2 
				ON a2.article_uuid = at2.article_uuid
				AND at2.language_code IN (#{languageCode}, 'int')
			WHERE a2.article_uuid <> '2037426d-ad61-4d12-8a04-765228806dbf' AND a2.serial_article_uuid = null
			GROUP BY 
				a2.article_uuid,
				at2.article_name,
				a2.article_name,
				a2.view_counter,
				a2.date_created,
				a2.created_user
		),
		
		serial_article_master AS (
			SELECT 
				sa.serial_article_uuid AS article_uuid, 
				COALESCE(sat2.serial_article_name, sa.serial_article_name) AS article_name,
				NULL::int AS view_counter,
				NULL::timestamp AS date_created,
				NULL::text AS created_user,
				true AS is_serial_article_master,
				COUNT(*)::int AS topic_overlap
			FROM target_topics tt1
			JOIN serial_article_topic sat 
				ON tt1.topic_uuid = sat.topic_uuid
			JOIN serial_article sa 
				ON sat.serial_article_uuid = sa.serial_article_uuid
			LEFT JOIN serial_article_translation sat2 
				ON sa.serial_article_uuid = sat2.serial_article_uuid
				AND sat2.language_code IN (#{languageCode}, 'int')
			GROUP BY 
				sa.serial_article_uuid,
				sat2.serial_article_name,
				sa.serial_article_name
		)
		
		SELECT *
		FROM (
			SELECT * FROM single_article
			UNION ALL
			SELECT * FROM serial_article_master
		) combined
		ORDER BY topic_overlap DESC, is_serial_article_master
		LIMIT #{size} OFFSET #{offset}
	  ]]>
	</select>

</mapper>